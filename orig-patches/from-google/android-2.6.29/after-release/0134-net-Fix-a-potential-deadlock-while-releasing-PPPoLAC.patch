From d89050258f0133ae56d586dd6d7345d473c9a216 Mon Sep 17 00:00:00 2001
From: Chia-chi Yeh <chiachi@android.com>
Date: Wed, 17 Jun 2009 08:51:23 +0800
Subject: [PATCH 134/247] net: Fix a potential deadlock while releasing PPPoLAC/PPPoPNS socket.

PPP driver guarantees that no thread will be executing start_xmit() after
returning from ppp_unregister_channel(). To achieve this, a spinlock (downl)
is used. In pppolac_release(), ppp_unregister_channel() is called after sk_udp
is locked. At the same time, another thread might be running in pppolac_xmit()
with downl. Thus a deadlock will occur if the thread tries to lock sk_udp.
The same situation might happen on sk_raw in pppopns_release().

Signed-off-by: Chia-chi Yeh <chiachi@android.com>
---
 drivers/net/pppolac.c |    5 ++---
 drivers/net/pppopns.c |    2 +-
 2 files changed, 3 insertions(+), 4 deletions(-)

diff --git a/drivers/net/pppolac.c b/drivers/net/pppolac.c
index 893a652..1f52227 100644
--- a/drivers/net/pppolac.c
+++ b/drivers/net/pppolac.c
@@ -262,13 +262,12 @@ static int pppolac_release(struct socket *sock)
 
 	if (sk->sk_state != PPPOX_NONE) {
 		struct sock *sk_udp = (struct sock *)pppox_sk(sk)->chan.private;
-		lock_sock(sk_udp);
-
 		pppox_unbind_sock(sk);
+
+		lock_sock(sk_udp);
 		sk_udp->sk_user_data = NULL;
 		udp_sk(sk_udp)->encap_type = 0;
 		udp_sk(sk_udp)->encap_rcv = NULL;
-
 		release_sock(sk_udp);
 		sockfd_put(sk_udp->sk_socket);
 	}
diff --git a/drivers/net/pppopns.c b/drivers/net/pppopns.c
index 1fb19dc..7edff02 100644
--- a/drivers/net/pppopns.c
+++ b/drivers/net/pppopns.c
@@ -230,8 +230,8 @@ static int pppopns_release(struct socket *sock)
 
 	if (sk->sk_state != PPPOX_NONE) {
 		struct sock *sk_raw = (struct sock *)pppox_sk(sk)->chan.private;
-		lock_sock(sk_raw);
 		pppox_unbind_sock(sk);
+		lock_sock(sk_raw);
 		sk_raw->sk_user_data = NULL;
 		release_sock(sk_raw);
 		sock_release(sk_raw->sk_socket);
-- 
1.7.0.4

